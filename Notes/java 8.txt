CLASSPATH
*********
On doing Build from intellij or running javac from cmd, te .class file is generated. Default path for .class when javac from cmd is same as where the source file is. To override specify the path using -d "<path>".Any classpath that is set explicitly through cmd line while executing java command takes precedence over global classpath.

when classpath is not set in the system, you have to navigate to one level up the package folder and then give the full namespace of the class and execute using java command

If classpath is specified then you donot have to explicitly go to the folder wheree the .class file is, you can run it from anywhere

when using IDEs, the classpath is taken care by the IDE

Lamda Expression and Annonymous Inner class
*******************************************
Annonymous classes are declared and used when you want a just in time implementation of a class or Functional Interface (I with just one method). So, only a single object is created for the class while declaring it. In that
 way you do not have to define a subclass or explicit implementation of an interface.
From Java 8, you can have default methods and static method in a I but anonymous inner class/lambda expressions can be used to implement any I that has a single abstract method (Functional I).
The default methods in an I is by default public and so doesnt have to be explicitly declared public.
If not declared as default, methods are public and abstract by default.
Some differences with a normal class would be it can either implement only 1 interface or extend a class at a time and also it cannot have a constructor as it doesnt even have a name.

Lamda expressions can be used to define anonymous inner classes in a functional programming style with Java 8
In lambda expressions, you dont have to specify the method name, the param type is also interpreted by JVM, just pass in params in brackets and implement the method. You do not even need the new keyword.
Anonymous inner classes can be generated for abstract classes as well as for Functional interfaces.

Comparator<String> comp =  (o1,o2) --> o1.compareTo(o2)
Comparator<String> comp =  (o1,o2) --> {return o1.compareTo(o2);  };

Single params can be passed without paranthesis, no args or more than 1 arg should have paranthesis.
When only single statement return type is deduced, if more than 1 statement in the method implementation then return type must be specified.
There are many functional I available in the java.util.function package which is utilised in many inbuild java jars and also can be utilised by developers.

Every class in a java file generates a .class file. Annonymous inner classes have numbers for their .class file. Lambdas$1.class.
But when annonymous inner classes are implemnted using lamda expression then the .class file is not generated.

lambdas and Anonymous inner classes - https://dzone.com/articles/how-lambdas-and-anonymous-inner-classesaic-work
Anonymous - can implement abstrcat classes with multiple abstrcat methods as well as I
Lamda - only functional I
Anonymous- generates .class
Lambda - doesnot - is an invokeddynamic instruction, generates a static method for the implementation and uses LamdaFactory to invoke the method.
Lamdas can access only effectively final variables, anonymous inner class can access instance and so can have state.


GIT
***
https://www.ibm.com/support/knowledgecenter/en/SS9PHW/com.ibm.digitalcommerce.developer.doc/tasks/tde_git_wrkspacepush.htm
https://www.intertech.com/Blog/introduction-to-git-concepts/

Object
------
Every object has State, Identity and Behaviour
State - is the variables of class, properties of the class
Behaviour - methods/functions in the class - how object behaves when state changes - methods, constructor, destructor are all behaviour.
Identity - property of object which distinguishes it from other objects.

Module - JAVA 9
---------------
package - collection of classes
module - collection of packages
com.azul.zoop.alpha.Class1
com.azul.zoop.beta.Class2
Module - com.azul.zoop
Module Declaration :
create module-info.java - This is not a java file but has extension .java and is compiled into class file with list of all the classes with its namespace.
and declare :
module com.azul.zoop{
}
The module-info.jar file is added to the JAR file.

One module can depend on other module.
Package visibility can be controlled in the module using the keyword 'export'
module com.azul.zoop{
requires com.azul.zoop.alpha
export com.azul.zoop.beta
com.azul.zoop.theta  ---> this is not visible or cannot be exported

classloaders have changed - 3 classloaders are there
}


